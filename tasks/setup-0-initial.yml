---
- name: Register hostname when initialising
  ansible.builtin.set_fact:
    emqx_hostname: >-
      {%- if hostvars[inventory_hostname].emqx_hostname is defined -%}
      {{- hostvars[inventory_hostname].emqx_hostname -}}
      {%- else -%}
        {%- if inventory_hostname is match("emqx\\d+.*") -%}
        {%- set lookup_key = inventory_hostname | regex_replace('^(emqx\\d+).*$', '\\1') + '-test' -%}
        {%- set host_vars = hostvars[inventory_hostname]['molecule_yml']['provisioner']['inventory']['host_vars'] -%}
        {{- host_vars[lookup_key]['emqx_hostname'] -}}
        {%- else -%}
        {{- emqx_hostname | default(inventory_hostname) -}}
        {%- endif -%}
      {%- endif -%}

- name: Set cluster_seeds when discovery strategy is static
  ansible.builtin.set_fact:
    emqx_cluster_seeds: >-
      [{%- for host in groups['all'] -%}'emqx@{{ hostvars[host].emqx_hostname }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%}]
  when: emqx_cluster_discovery_strategy == "static"

- name: Ensure EMQX group exists
  ansible.builtin.group:
    name: emqx
    state: present
    system: yes

- name: Ensure EMQX user exists
  ansible.builtin.user:
    name: emqx
    group: emqx
    home: "/var/lib/emqx"
    shell: "/bin/bash"
    system: yes
    state: present

- name: Ensure EMQX directories have correct ownership
  ansible.builtin.file:
    path: "{{ item }}"
    owner: emqx
    group: emqx
    recurse: yes
  with_items:
    - /etc/emqx
    - /var/lib/emqx
    - /var/log/emqx

- name: Get container info
  ansible.builtin.set_fact:
    container_info: |
      {% set result = [] %}
      {% for host in groups['all'] %}
      {%   if hostvars[host].ansible_default_ipv4 is defined %}
      {%     set host_info = {'ip': hostvars[host].ansible_default_ipv4.address} %}
      {%     if hostvars[host].emqx_hostname is defined %}
      {%       set _ = host_info.update({'hostname': hostvars[host].emqx_hostname}) %}
      {%     else %}
      {%       set _ = host_info.update({'hostname': host}) %}
      {%     endif %}
      {%     set _ = result.append(host_info) %}
      {%   endif %}
      {% endfor %}
      {{ result }}
  run_once: true

- name: Debug container info
  ansible.builtin.debug:
    var: container_info | from_yaml
  run_once: true

- name: Update /etc/hosts with all cluster nodes
  ansible.builtin.shell: |
    {% set hosts = container_info | from_yaml %}
    {% for host in hosts %}
    grep -q "^{{ host.ip }}\s\+{{ host.hostname }}$" /etc/hosts || \
    echo "{{ host.ip }} {{ host.hostname }}" >> /etc/hosts
    {% endfor %}
  when: container_info is defined
  changed_when: false

- name: Install required dependencies for Debian
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - libssl-dev
      - libncurses5-dev
      - curl
      - locales
      - ufw
      - chrony
    state: present
    update_cache: yes
    cache_valid_time: 3600
  register: apt_install_deps_result
  become: true
  when: ansible_os_family == 'Debian'

- name: Display package installation results
  ansible.builtin.debug:
    var: apt_install_deps_result
    verbosity: 1
  when: ansible_os_family == 'Debian'

- name: Install required dependencies for RedHat
  ansible.builtin.dnf:
    name:
      - openssl-devel
      - ncurses-devel
      - curl
      - wget
      - tar
      - gzip
      - firewalld
      - chrony
    state: present
    update_cache: true
  register: dnf_install_deps_result
  become: true
  when: ansible_os_family == 'RedHat'

- name: Display package installation results
  ansible.builtin.debug:
    var: dnf_install_deps_result
    verbosity: 1
  when: ansible_os_family == 'RedHat'

- name: Set hostname in /etc/hostname
  ansible.builtin.shell: |
    echo "{{ emqx_hostname }}" > /etc/hostname
    hostname "{{ emqx_hostname }}"
  when: ansible_service_mgr != 'systemd' or ansible_virtualization_type == 'docker'
  changed_when: false

- name: Check if requested locale is available
  ansible.builtin.shell: |
    set -o pipefail
    locale -a | grep -q '^{{ emqx_locale }}$'
  register: locale_check
  changed_when: false
  failed_when: false

- name: Set locale variable with fallback
  ansible.builtin.set_fact:
    effective_locale: "{{ emqx_locale if locale_check.rc == 0 else 'C.UTF-8' }}"

- name: Set timezone
  community.general.timezone:
    name: "{{ timezone }}"
  when: timezone is defined
